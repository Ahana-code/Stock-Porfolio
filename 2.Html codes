##This HTML file is the front-end part of the stock portfolio tracker 
##It works with the Python Flask code to display the stock data in a structured way

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Portfolio</title>
    <style>
        body {
            background-color: black;
            color: white;
            font-family: Arial, sans-serif;
            text-align: center;
        }

        h1 {
            font-size: 2.5em;
            margin-top: 20px;
        }

        table {
            width: 60%;
            margin: auto;
            border-collapse: collapse;
            background-color: #121212;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.2);
        }

        th, td {
            padding: 15px;
            border-bottom: 1px solid #333;
            text-align: center;
        }

        th {
            background-color: royalblue;
            color: white;
        }

        tr:hover {
            background-color: #222;
        }

        .positive {
            color: lightgreen;
            font-weight: bold;
        }

        .negative {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <h1>ðŸ“ˆ Stock Portfolio ðŸ“Š</h1>

    <table>
        <tr>
            <th>Stock</th>
            <th>Symbol</th>
            <th>Price</th>
            <th>Change</th>
        </tr>
        {% for stock in stocks %}
        <tr>
            <td>{{ stock.name }}</td>
            <td>{{ stock.symbol }}</td>
            <td>${{ "%.2f"|format(stock.price) }}</td>
            <td class="{% if stock.change >= 0 %}positive{% else %}negative{% endif %}">
                {% if stock.change >= 0 %} ðŸ”¼ {% else %} ðŸ”½ {% endif %}
                {{ stock.change }}%
            </td>
        </tr>
        {% endfor %}
    </table>

</body>
</html>


##This file styles and displays stock market data in a dark-themed table
##It uses Flask's Jinja templating to fill in stock details dynamically, ensuring live updates whenever the Python code fetches new data
